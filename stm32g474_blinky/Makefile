##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Sat Sep 26 18:04:50 CEST 2020] 
##########################################################################################################################
# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------


#Added by KeY Only fo better formating
include makefile.conf

######################################
#SOURCES A little bit easyer to understand
######################################
C_SOURCES += $(C_SOURCES_DIR)main.c 
C_SOURCES += $(C_SOURCES_DIR)gpio.c 
C_SOURCES += $(C_SOURCES_DIR)usart.c 
C_SOURCES += $(C_SOURCES_DIR)stm32g4xx_it.c 
C_SOURCES += $(C_SOURCES_DIR)stm32g4xx_hal_msp.c 
C_SOURCES += $(C_SOURCES_DIR)system_stm32g4xx.c
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_gpio.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_uart.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_uart_ex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_rcc.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_rcc_ex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_flash.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_flash_ex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_flash_ramfunc.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_exti.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_dma.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_dma_ex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_pwr.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_pwr_ex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_cortex.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_tim.c 
C_SOURCES += $(HAL_DIR)stm32g4xx_hal_tim_ex.c 

#CPP SOurces for Compilation 
CPP_SOURCES += $(CPP_SOURCES_DIR)app_main.cpp 

# ASM sources
ASM_SOURCES += startup_stm32g474xx.s

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32G474xx

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IDrivers/STM32G4xx_HAL_Driver/Inc \
-IDrivers/STM32G4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32G4xx/Include \
-IDrivers/CMSIS/Include \
-IDrivers/CMSIS/Include

#######################################
#ASSEMBLY FLAGS
#######################################
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
#######################################
#C FLAGS
#######################################
CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

#check if Debug is defined
ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
#CPP FLAGS
#######################################
#FOR NOW C FLAGS ARE USED FOR COMPILATION OF CPP FILES
#ToDo : Depending from which flags do we want to use we can implement a CPPFLAGS and optimize it as we want.
#ToDo ;manage HEader files 

#######################################
#LINKER FLAGS
#######################################
LDSCRIPT = STM32G474RETx_FLASH.ld
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#######################################
#MAKE ALL
#######################################
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(CPP) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
#BURN TO FLASH
#######################################
burn:
	st-flash write build/$(TARGET).bin 0x8000000

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
